package com.gildedrose;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.shadow.com.univocity.parsers.annotations.Nested;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.DisplayName;

class GildedRoseTest {

    @Test
    void foo() {
        Item[] items = new Item[] { new Item("foo", 0, 0) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals("foo", app.items[0].name);
        assertEquals(0, app.items[0].quality);
        assertEquals(-1, app.items[0].sellIn);
    }
	
    
    
    @org.junit.jupiter.api.Nested
	@DisplayName("Pruebas producto general")
	class Divide {
    		@DisplayName("Fecha recomendada sí y NO queda calidad")
			@Test
			void Prueba1() {
		        Item[] items = new Item[] { new Item("foo", 2, 1) };
		        GildedRose app = new GildedRose(items);
		        app.updateQuality();
		        assertEquals("foo", app.items[0].name);
		        assertEquals(0, app.items[0].quality);
		        assertEquals(1, app.items[0].sellIn);
		    }
    		
    		@DisplayName("Fecha recomendada sí y queda calidad")
			@Test
			void Prueba2() {
		        Item[] items = new Item[] { new Item("foo", 4, 2) };
		        GildedRose app = new GildedRose(items);
		        app.updateQuality();
		        assertEquals("foo", app.items[0].name);
		        assertEquals(1, app.items[0].quality);
		        assertEquals(3, app.items[0].sellIn);
		    }
    		
    		@DisplayName("Fecha recomendada NO y sin calidad")
			@Test
			void Prueba3() {
		        Item[] items = new Item[] { new Item("foo", -1, 1) };
		        GildedRose app = new GildedRose(items);
		        app.updateQuality();
		        assertEquals("foo", app.items[0].name);
		        assertEquals(0, app.items[0].quality);
		        assertEquals(-2, app.items[0].sellIn);
		    }
    		
    		@DisplayName("NO fecha recomendada, SI calidad")
			@Test
			void Prueba4() {
		        Item[] items = new Item[] { new Item("foo", -2, 7) };
		        GildedRose app = new GildedRose(items);
		        app.updateQuality();
		        assertEquals("foo", app.items[0].name);
		        assertEquals(5, app.items[0].quality);
		        assertEquals(-3, app.items[0].sellIn);
		    }
    	}
    
    @org.junit.jupiter.api.Nested
	@DisplayName("Pruebas producto Aged Brie")
	class AgedBrie {
    		@DisplayName("Fecha recomendada sí y queda calidad")
			@Test
			void Prueba1() {
		        Item[] items = new Item[] { new Item("foo", 2, 1) };
		        GildedRose app = new GildedRose(items);
		        app.updateQuality();
		        assertEquals("foo", app.items[0].name);
		        assertEquals(0, app.items[0].quality);
		        assertEquals(1, app.items[0].sellIn);
		    }
    		
    		@DisplayName("Fecha recomendada sí pero sin calidad")
			@Test
			void Prueba2() {
		        Item[] items = new Item[] { new Item("foo", 4, 2) };
		        GildedRose app = new GildedRose(items);
		        app.updateQuality();
		        assertEquals("foo", app.items[0].name);
		        assertEquals(1, app.items[0].quality);
		        assertEquals(3, app.items[0].sellIn);
		    }
    		
    		@DisplayName("Fecha recomendada sí pero sin calidad")
			@Test
			void Prueba3() {
		        Item[] items = new Item[] { new Item("foo", -1, 1) };
		        GildedRose app = new GildedRose(items);
		        app.updateQuality();
		        assertEquals("foo", app.items[0].name);
		        assertEquals(0, app.items[0].quality);
		        assertEquals(-2, app.items[0].sellIn);
		    }
    		
    		@DisplayName("Ni fecha recomendada, ni calidad")
			@Test
			void Prueba4() {
		        Item[] items = new Item[] { new Item("foo", -2, 7) };
		        GildedRose app = new GildedRose(items);
		        app.updateQuality();
		        assertEquals("foo", app.items[0].name);
		        assertEquals(5, app.items[0].quality);
		        assertEquals(-3, app.items[0].sellIn);
		    }
    	}
}
